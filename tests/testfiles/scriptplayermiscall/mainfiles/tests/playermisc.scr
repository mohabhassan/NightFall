main:
	wait 1

    level.playermisc_testcases_passed = 0
    level.playermisc_testcases_total = 0
    level.playermisc_failed_testscases = ""

    setcvar test_playermisc_status running

    while(!$player) waitframe;

    local.userinfo = $player[1].userinfo

    local.uiresult = regex_parse "\\\\rate\\\\\\d+\\\\snaps\\\\20\\\\name\\\\mohpc_test0" local.userinfo 0

    waitthread validate_test local.uiresult[success] 1 ("local.uiresult[success]:" + local.userinfo)
    println "waiting for player to spawn ::::::::::::::::::::::"
    while($player && $player[1].dmteam == spectator) waitframe;
    println "player spawned ::::::::::::::::::::::"
    wait 5; //wait for player to spawn
    
    waitthread validate_test ($player getkills) 0 ("($player getkills)")
    waitthread validate_test ($player getdeaths) 0 ("($player getdeaths)")

    if(float(getcvar shortversion) == 1.11)
    {
        $player addkills 1
        $player adddeaths 1
        waitthread validate_test ($player getkills) 1 ("($player addkills)")
        waitthread validate_test ($player getdeaths) 1 ("($player adddeaths)")
    }


    local.inv = $player.inventory
	local.t = local.inv == NIL
    waitthread validate_test local.t  0 ("(local.inv == NIL)")
	if(local.inv)
	{
		for(local.i = 0; local.i < local.inv.size; local.i++)
		{
            local.t = local.inv[local.i].classname == "Weapon" || local.inv[local.i].classname == "InventoryItem"
            waitthread validate_test local.t  1 ("(inv item classname)")
		}
	}
    
    local.weap = $player getactiveweap 0
    local.t = local.weap.classname == "Weapon"
    waitthread validate_test local.t  1 ("(getactiveweap returning weapon)")

    local.state = $player getconnstate
    waitthread validate_test local.state  4 ("(invalid connstate)")

    setcvar test_playermisc_score (level.playermisc_testcases_passed + "/" + level.playermisc_testcases_total)
    setcvar test_playermisc_failed level.playermisc_failed_testscases
    setcvar test_playermisc_status finished
end

validate_test local.actual local.expected local.test:
    if(local.actual != local.expected)
    {
        println("playermisc test error: " + local.test + " = " + local.actual + "  expected: " + local.expected)
        level.playermisc_failed_testscases += (local.test + "=" + local.actual + "|")
    }
    else
    {
        level.playermisc_testcases_passed++
    }
    level.playermisc_testcases_total++
end
